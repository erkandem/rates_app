""" $ locust -f loadtest.py --host=https://rfr.herokuapp.com $ locust -f loadtest.py --host=http://127.0.0.1:5000"""from locust import HttpLocust, TaskSet, taskimport jsonimport randomfrom datetime import datetime as dt, timedeltafrom tests.sample_user_agents import ua_stringswith open('migration/test_users.json') as f:    test_users = json.load(f)heroku_test_host = 'https://testrfr.herokuapp.com'heroku_host = 'https://rfr.herokuapp.com'local_host = 'http://127.0.0.1:8000'class WebsiteTasks(TaskSet):    headers = None    def on_start(self):        user = random.choices(list(test_users))[0]        pw = test_users.pop(user)        self.headers = {'Authentication': 'failed'}        login = {"username": user, "password": pw}        login = json.dumps(login).encode('utf-8')        response = self.client.post('/api/v1/auth/login', data=login)        if response.status_code == 200:            data = json.loads(response.content.decode('utf-8'))            token = data['access_token']            self.headers = {                'Authorization': f'Bearer {token}',                'Accept': 'application/json',                'User-Agent': random.choice(ua_strings)            }        return    @task(1)    def index(self):        self.client.get('/')    @task(2)    def curve(self):        self.client.get('/api/v1/euro/curve', headers=self.headers)    @task(2)    def single(self):        self.client.get('/api/v1/euro/curve/maturity?maturity=py_3m',  headers=self.headers)    @task(4)    def curve_multiple(self):        startdate = dt.now() - timedelta(days=random.SystemRandom().randint(1, 365 * 3))        delta = (dt.now() - startdate).days        enddate = startdate + timedelta(days=random.SystemRandom().randint(1, delta))        params = {            'startdate': startdate.date(),            'enddate': enddate.date(),        }        self.client.get(            f'/api/v1/euro/curve',            headers=self.headers,            params=params        )    @task(4)    def single_multiple(self):        startdate = dt.now() - timedelta(days=random.SystemRandom().randint(1, 365 * 3))        delta = (dt.now() - startdate).days        enddate = startdate + timedelta(days=random.SystemRandom().randint(1, delta))        params = {            'maturity': 'py_3m',            'startdate': startdate.date(),            'enddate': enddate.date(),        }        self.client.get(            f'/api/v1/euro/curve/maturity',            headers=self.headers,            params=params        )class WebsiteUser(HttpLocust):    host = local_host    task_set = WebsiteTasks    min_wait = 1000    max_wait = 2000print('http://localhost:8089')